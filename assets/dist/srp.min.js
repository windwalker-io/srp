(function(h,c){typeof exports=="object"&&typeof module<"u"?c(exports):typeof define=="function"&&define.amd?define(["exports"],c):(h=typeof globalThis<"u"?globalThis:h||self,c(h.SRP={}))})(this,function(h){"use strict";function c(n){return n<0n&&(n*=-1n),n}function l(n,t){if(n===0n)return{g:t,x:0n,y:1n};{let{g:e,x:r,y:i}=l(t%n,n);return{g:e,x:i-t/n*r,y:r}}}function f(n,t){if(t<=0n)throw new Error("m must be > 0");const e=n%t;return e<0n?e+t:e}function w(n,t){return f(n,t)}function T(n,t){const e=l(f(n,t),t);if(e.g!==1n)throw new Error("Modular inverse does not exist");return f(e.x,t)}function U(n){return n%2n===1n}function o(n,t,e){if(e===0n)throw new Error("Cannot modPow with modulus 0");if(t===0n)return 1n;if(n=f(n,e),t<0n)return T(o(n,c(t),e),e);let r=1n;for(;t>0n;){if(n===0n)return 0n;U(t)&&(r=r*n%e),t=t/2n,n=n*n%e}return r}function y(n){if(typeof process=="object"&&typeof require=="function"){const{randomBytes:t}=require("crypto");return new Uint8Array(t(n))}else{const t=new Uint8Array(n);return window.crypto.getRandomValues(t),t}}function b(n){return n.length%2!==0&&(n="0"+n),n}function S(n,t=!1){let e=n.toString(16);return t?b(e):e}function v(n){return S(n,!0)}function H(n){const t=n.length/2,e=new Uint8Array(t);for(let r=0,i=0;r<t;r++,i+=2)e[r]=parseInt(n.slice(i,i+2),16);return e}function p(n,t=!1){if(n<0n)if(t){const r=1n<<(BigInt(n.toString(2).length)/8n+1n)*8n;n+=r}else throw new Error("BigInt should larger than 0 to convert to Uint8Array");return H(v(n))}function I(n){const t=n.startsWith("-");t&&(n=n.substring(1));let e=BigInt("0x"+n);return t?-e:e}function a(n,t=10){if(typeof n=="bigint")return n;if(typeof n=="number"||t===10)return BigInt(n);if(t===16)return I(n);{let e=0n;for(let r=0;r<n.length;r++){const i=parseInt(n[r],t);if(isNaN(i))throw new Error("Invalid character for base: "+t);e=e*BigInt(t)+BigInt(i)}return e}}function d(n,t=!1){let e=0n;const r=t&&(n[0]&128)!==0;if(r){for(let s=0;s<n.length;s++)n[s]=~n[s]&255;let i=1;for(let s=n.length-1;s>=0&&i>0;s--){const g=n[s]+i;n[s]=g&255,i=g>>8}}for(let i=0;i<n.length;i++)e=(e<<8n)+BigInt(n[i]);return r?-e:e}function N(n,t=!1){return S(d(n,t))}const P=21766174458617435773191008891802753781907668374255538511144643224689886235383840957210909013086056401571399717235807266581649606472148410291413364152197364477180887395655483738115072677402235101762521901569820740293149529620419333266262073471054548368736039519702486226506248861060256971802984953561121442680157668000761429988222457090413873973970171927093992114751765168063614761119615476233422096442783117971236371647333871414335895773474667308967050807005509320424799678417036867928316761272274230314067548291133582479583061439577559347101961771406173684378522703483495337037655006751328447510550299250924469288819n,A=2n,B=a("5b9e8ef059c6b32ea59fc1d322d37f04aa30bae5aa9003b8321e21ddb04e300",16);function x(){return typeof window>"u"}function L(n){let t;return typeof window>"u"?t=Buffer.from(n,"utf-8"):t=new TextEncoder().encode(n),t}function R(...n){let t=n.reduce((i,s)=>i+s.byteLength,0),e=new Uint8Array(t),r=0;for(let i of n)e.set(new Uint8Array(i),r),r+=i.byteLength;return e}class E{constructor(t,e,r){this.prime=t,this.generator=e,this.key=r,this.length=256/8}setHasher(t){return this.hasher=t,this}async generateRandomSecret(){return d(y(this.getLength()))}getLength(){return this.length}setLength(t){return this.length=t,this}setSize(t){return this.setLength(Math.floor(t/8))}async generateCommonSecret(t,e){return this.checkNotEmpty(t,"A"),this.checkNotEmpty(e,"B"),this.hash(this.pad(t),this.pad(e))}async generateClientSessionProof(t,e,r,i,s){return await this.hash(await this.hash(this.getPrime())^await this.hash(this.getGenerator()),await this.hash(t),e,r,i,s)}async generateServerSessionProof(t,e,r){return this.hash(t,e,r)}getPrime(){return this.prime}getGenerator(){return this.generator}getKey(){return this.key}async hash(...t){const e=t.map(i=>typeof i=="bigint"?p(i):L(i)),r=await this.hashToString(R(...e));return a(r,16)}async hashToString(t){let e=this.hasher;typeof e=="string"&&(e=this.getHasherByName(e));let r=await e(t,this.getLength());return r instanceof Uint8Array&&(r=N(r)),r}getHasherByName(t){return t=t.toLowerCase(),async e=>{if(x()){const{createHash:r}=require("crypto");return new Uint8Array(Buffer.from(r(t).update(Buffer.from(e)).digest("hex"),"hex"))}switch(t){case"sha1":return new Uint8Array(await crypto.subtle.digest("SHA-1",e));case"sha256":return new Uint8Array(await crypto.subtle.digest("SHA-256",e));case"sha384":return new Uint8Array(await crypto.subtle.digest("SHA-384",e));case"sha512":return new Uint8Array(await crypto.subtle.digest("SHA-512",e))}throw new Error("Available hasher not found.")}}checkNotEmpty(t,e){if(!t)throw new Error(`Value: \`${e}\` should not be empty.`);if(typeof t=="bigint"&&t===0n)throw new Error(`Value: \`${e}\` should not be zero.`)}pad(t){const e=this.intToBytes(this.getPrime()).length,i=t.toString(16).padStart(e,"0");return BigInt("0x"+i)}intToBytes(t){return new TextDecoder().decode(p(t))}}class m extends E{static create(t=void 0,e=void 0,r=void 0){return t??(t=P),e??(e=A),r??(r=B),new this(a(t,16),a(e,16),a(r,16))}async register(t,e){const r=await this.generateSalt(),i=await this.generatePasswordHash(r,t,e),s=await this.generateVerifier(i);return{salt:r,verifier:s}}async generateSalt(){return d(y(16))}async generatePasswordHash(t,e,r){return await this.hash(t,await this.hash(e+":"+r))}async generatePreMasterSecret(t,e,r,i){const s=this.getPrime(),g=this.getGenerator(),C=this.getKey();let u=e-C*o(g,r,s);return u<0n&&(u=s-c(u),u=w(u,s)),o(u,t+i*r,s)}async generateVerifier(t){return o(this.getGenerator(),t,this.getPrime())}async generatePublic(t){return o(this.getGenerator(),t,this.getPrime())}}class G extends E{static create(t=void 0,e=void 0,r=void 0){return t??(t=P),e??(e=A),r??(r=B),new this(a(t,16),a(e,16),a(r,16))}generatePublic(t,e){const r=this.getPrime();return w(this.getKey()*e+o(this.getGenerator(),t,r),r)}generatePreMasterSecret(t,e,r,i){const s=this.getPrime();return o(o(r,i,s)*t,e,s)}}h.SRPClient=m,h.SRPServer=G});
//# sourceMappingURL=srp.min.js.map
