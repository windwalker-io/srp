{"version":3,"file":"srp.es.js","sources":["../node_modules/bigint-toolkit/dist/bigint-toolkit.es.js","../../../src/utils.ts","../../../src/services/AbstractSRPHandler.ts","../../../src/services/SRPClient.ts","../../../src/error/InvalidSessionProofError.ts","../../../src/services/SRPServer.ts"],"sourcesContent":["/**\n * Return an absolute value of bigint.\n */\nfunction abs(num) {\n    if (num < 0n) {\n        num *= -1n;\n    }\n    return num;\n}\n\n/**\n * Calculates the extended greatest common divisor (eGCD) of two BigInt numbers.\n *\n * This function computes the eGCD of two BigInt numbers 'a' and 'b', and returns an object\n * containing the GCD ('gcd') and coefficients 'x' and 'y' such that 'ax + by = gcd'.\n *\n * ```ts\n * const result = eGcd(16n, 10n);\n * result.g === 2n;\n * result.x === -3n;\n * result.y === 5n;\n * ```\n */\nfunction eGcd(a, b) {\n    if (a === 0n) {\n        return {\n            g: b,\n            x: 0n,\n            y: 1n,\n        };\n    }\n    else {\n        let { g, x, y } = eGcd(b % a, a);\n        return {\n            g,\n            x: y - (b / a) * x,\n            y: x,\n        };\n    }\n}\n\n/**\n * Finds the smallest positive element that is congruent to a in modulo m.\n */\nfunction toZn(a, m) {\n    if (m <= 0n) {\n        throw new Error('m must be > 0');\n    }\n    const aZm = a % m;\n    return (aZm < 0n) ? aZm + m : aZm;\n}\n/**\n * An alias of toZn()\n */\nfunction mod(a, m) {\n    return toZn(a, m);\n}\n\n/**\n * Calculates the modular multiplicative inverse of a BigInt 'a' modulo 'm'.\n *\n * This function computes the value 'x' such that '(a * x) % m === 1' where 'a' and 'm' are BigInt numbers.\n */\nfunction modInv(a, m) {\n    const egcd = eGcd(toZn(a, m), m);\n    if (egcd.g !== 1n) {\n        throw new Error('Modular inverse does not exist');\n    }\n    return toZn(egcd.x, m);\n}\n\n/**\n * Function to implement Chinese Remainder Theorem.\n */\nfunction crt(num, rem) {\n    let sum = 0n;\n    // Product of all numbers\n    const prod = num.reduce((acc, val) => acc * val, 1n);\n    for (let i = 0; i < num.length; i++) {\n        const p = prod / num[i];\n        sum += rem[i] * modInv(p, num[i]) * p;\n    }\n    return sum % prod;\n}\n\n/**\n * Calculates the greatest common divisor (GCD) of two or more BigInt numbers.\n *\n * This function computes the largest positive integer that divides all the input numbers without remainder.\n */\nfunction gcd(a, b) {\n    if (b === 0n) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\n/**\n * Check a bigint is odd.\n */\nfunction isOdd(n) {\n    return (n % 2n) === 1n;\n}\n\n/**\n * Check a bigint is even.\n */\nfunction isEven(n) {\n    return !isOdd(n);\n}\n\n/**\n * Check a bigint is unit.\n */\nfunction isUnit(n) {\n    return abs(n) === 1n;\n}\n\n/**\n * Calculates the least common multiple (LCM) of two or more BigInt numbers.\n */\nfunction lcm(a, b) {\n    return (a / gcd(a, b)) * b;\n}\n\n/**\n * Find max from a set of bigint.\n */\nfunction max(...nums) {\n    return nums.reduce((max, current) => current > max ? current : max);\n}\n\n/**\n * Find min from a set of bigint.\n */\nfunction min(...nums) {\n    return nums.reduce((min, current) => current < min ? current : min);\n}\n\n/**\n * Calculates the modular addition of two BigInt numbers.\n *\n * This function computes the result of `(a + b) % m` where `a`, `b`, and `m` are BigInt numbers.\n */\nfunction modAdd(a, b, mod) {\n    return ((a % mod) + (b % mod)) % mod;\n}\n\n/**\n * Calculates the modular multiplication of two BigInt numbers.\n *\n * This function computes the result of `(a * b) % m` where `a`, `b`, and `m` are BigInt numbers.\n */\nfunction modMultiply(a, b, mod) {\n    return ((a % mod) * (b % mod)) % mod;\n}\n\n/**\n * Calculates the modular exponentiation of a BigInt 'base' to the power of a BigInt 'exponent' modulo 'm'.\n *\n * This function computes the result of `base^exp % m` where 'base', 'exponent', and 'm' are BigInt numbers.\n */\nfunction modPow(base, exp, m) {\n    if (m === 0n) {\n        throw new Error('Cannot modPow with modulus 0');\n    }\n    if (exp === 0n) {\n        return 1n;\n    }\n    base = toZn(base, m);\n    if (exp < 0n) {\n        return modInv(modPow(base, abs(exp), m), m);\n    }\n    let r = 1n;\n    while (exp > 0n) {\n        if (base === 0n) {\n            return 0n;\n        }\n        if (isOdd(exp)) {\n            r = r * base % m;\n        }\n        exp = exp / 2n;\n        base = base * base % m;\n    }\n    return r;\n}\n\n/**\n * Make a bigint negative.\n */\nfunction negate(num) {\n    return -abs(num);\n}\n\n/**\n * Calculates Euler's totient function (phi function) of a BigInt 'n'.\n *\n * Euler's totient function calculates the count of positive integers less than or equal to 'n'\n * that are coprime (have greatest common divisor 1) with 'n'.\n */\nfunction phi(n) {\n    let result = n;\n    for (let i = 2n; i * i <= n; i++) {\n        if (n % i === 0n) {\n            while (n % i === 0n) {\n                n /= i;\n            }\n            result -= result / i;\n        }\n    }\n    if (n > 1n) {\n        result -= result / n;\n    }\n    return result;\n}\n\n/**\n * Generates cryptographically strong pseudorandom data, it will return\n * an Uint8Array object. This function use `crypto.randomBytes()` in node.js\n * and `window.crypto.getRandomValues()` in Web browser.\n *\n * You can convert it to hex by `uint8Array2Hex()` or use some base64\n * library to convert it to string.\n */\nfunction randomBytes(bufferSize) {\n    // This checks if the code is running in a Node.js environment\n    if (typeof process === 'object' && typeof require === 'function') {\n        const { randomBytes: rb } = require('crypto');\n        return new Uint8Array(rb(bufferSize));\n    }\n    else {\n        // For web environments, use the Web Crypto API\n        const buffer = new Uint8Array(bufferSize);\n        window.crypto.getRandomValues(buffer);\n        return buffer;\n    }\n}\n\n/**\n * Generate a random bigint number between 2 numbers.\n */\nfunction random(start, end) {\n    if (start > end) {\n        throw new Error('Start must be less than end');\n    }\n    const diff = end - start + 1n;\n    const diffLength = diff.toString(2).length;\n    let result;\n    do {\n        const byteSize = Math.ceil(diffLength / 8);\n        const buffer = randomBytes(byteSize);\n        let hexString = '0x';\n        buffer.forEach(byte => {\n            hexString += byte.toString(16).padStart(2, '0');\n        });\n        result = BigInt(hexString) & (1n << BigInt(diffLength) - 1n);\n    } while (result > diff);\n    return start + result;\n}\n\nvar math = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    abs: abs,\n    crt: crt,\n    eGcd: eGcd,\n    gcd: gcd,\n    isEven: isEven,\n    isOdd: isOdd,\n    isUnit: isUnit,\n    lcm: lcm,\n    max: max,\n    min: min,\n    mod: mod,\n    modAdd: modAdd,\n    modInv: modInv,\n    modMultiply: modMultiply,\n    modPow: modPow,\n    negate: negate,\n    phi: phi,\n    random: random,\n    toZn: toZn\n});\n\nconst BigMath = math;\n\n/**\n * Pad `0` to start if hex string length is odd.\n */\nfunction hexPadZero(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = '0' + hex;\n    }\n    return hex;\n}\n\n/**\n * Bigint to hex conversion.\n *\n * The second argument `padZero = true` will pad a `0` on start if return length is odd.\n */\nfunction bigintToHex(num, padZero = false) {\n    let hexString = num.toString(16);\n    if (!padZero) {\n        return hexString;\n    }\n    return hexPadZero(hexString);\n}\n\n/**\n * Bigint to hex conversion and pad a `0` on start if return length is odd.\n */\nfunction bigintToHexPadZero(num) {\n    return bigintToHex(num, true);\n}\n\n/**\n * Convert hex string to Uint8Array.\n */\nfunction hexToUint8(hex) {\n    // Calculate the number of bytes needed\n    const numBytes = hex.length / 2;\n    const byteArray = new Uint8Array(numBytes);\n    // Parse each byte in the hex string and add it to the Uint8Array\n    for (let i = 0, j = 0; i < numBytes; i++, j += 2) {\n        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);\n    }\n    return byteArray;\n}\n\n/**\n * Bigint to Uint8Array conversion.\n *\n * By default, this function unable to handle negative bigint, and will throw an Error.\n * If you want to convert a negative bigint to Uint8Array, set second argument as TRUE,\n * that this functions will try making 2's complement on the bigint to make it\n * positive.\n *\n * NOTE: If you convert a negative bigint to Uint8Array, you must use\n *\n * - `uint8ToBigint(num, true)`\n * - `uint8ToBigintWithNegative(num)`\n *\n * to inverse the Uint8Array so you can get negative bigint back.\n */\nfunction bigintToUint8(num, handleNegative = false) {\n    if (num < 0n) {\n        if (handleNegative) {\n            // Do a Bit complement to convert negative bigint to positive bigint\n            const bits = (BigInt(num.toString(2).length) / 8n + 1n) * 8n;\n            const prefix1 = 1n << bits;\n            num += prefix1;\n        }\n        else {\n            throw new Error('BigInt should larger than 0 to convert to Uint8Array');\n        }\n    }\n    return hexToUint8(bigintToHexPadZero(num));\n}\n\n/**\n * Convert an `ArrayBufferLike` interface to `Uint8Array`.\n */\nfunction bufferToUint8(buffer) {\n    return new Uint8Array(buffer);\n}\n\n/**\n * Convert hex to bigint and add `-` sign if origin bigint is negative.\n */\nfunction hexToBigint(hex) {\n    const isNegative = hex.startsWith('-');\n    if (isNegative) {\n        hex = hex.substring(1);\n    }\n    let result = BigInt('0x' + hex);\n    return isNegative ? -result : result;\n}\n\n/**\n * Convert any base of numbers to bigint.\n *\n * ```\n * toBigInt(123456789)\n * toBigInt('75bcd15', 16)\n * toBigInt('111010110111100110100010101', 2)\n * ```\n *\n * This function will auto add negative to hex string if input value less than 0.\n */\nfunction toBigint(num, from = 10) {\n    if (typeof num === 'bigint') {\n        return num;\n    }\n    if (typeof num === 'number') {\n        return BigInt(num);\n    }\n    if (from === 10) {\n        return BigInt(num);\n    }\n    else if (from === 16) {\n        return hexToBigint(num);\n    }\n    else {\n        let decimalValue = 0n;\n        for (let i = 0; i < num.length; i++) {\n            const digit = parseInt(num[i], from);\n            if (isNaN(digit)) {\n                throw new Error('Invalid character for base: ' + from);\n            }\n            decimalValue = decimalValue * BigInt(from) + BigInt(digit);\n        }\n        return decimalValue;\n    }\n}\n\n/**\n * Convert Uint8Array back to bigint.\n *\n * If an Uint8Array has 2's complement (Mostly converted from a negative number),\n * set second argument as TRUE to inverse it.\n */\nfunction uint8ToBigint(bytes, handleNegative = false) {\n    let result = 0n;\n    // Check if the most significant bit of the first byte is set (indicating a negative number)\n    const isNegative = handleNegative && (bytes[0] & 0x80) !== 0;\n    if (isNegative) {\n        // For negative numbers, perform two's complement inversion\n        for (let i = 0; i < bytes.length; i++) {\n            bytes[i] = ~bytes[i] & 0xff;\n        }\n        // Add one to complete the two's complement\n        let carry = 1;\n        for (let i = bytes.length - 1; i >= 0 && carry > 0; i--) {\n            const value = bytes[i] + carry;\n            bytes[i] = value & 0xff;\n            carry = value >> 8;\n        }\n    }\n    // Iterate over the Uint8Array from the beginning and shift left (<<) by 8 bits for each byte\n    for (let i = 0; i < bytes.length; i++) {\n        result = (result << 8n) + BigInt(bytes[i]);\n    }\n    return isNegative ? -result : result;\n}\n\n/**\n * Convert Uint8Array back to bigint and inverse the 2's complement (negative).\n */\nfunction uint8ToBigintWithNegative(bytes) {\n    return uint8ToBigint(bytes, true);\n}\n\n/**\n * Convert Uint8Array to ArrayBufferLike.\n */\nfunction uint8ToBuffer(bytes) {\n    return bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n}\n\n/**\n * Convert Uint8Array to hex string.\n *\n * If an Uint8Array has 2's complement (Mostly converted from a negative number),\n * set second argument as TRUE to inverse it.\n */\nfunction uint8ToHex(bytes, handleNegative = false) {\n    return bigintToHex(uint8ToBigint(bytes, handleNegative));\n}\n\n/**\n * Convert Uint8Array to hex and inverse the 2's complement (negative).\n */\nfunction uint8ToHexWithNegative(bytes) {\n    return bigintToHex(uint8ToBigintWithNegative(bytes));\n}\n\nexport { BigMath, abs, bigintToHex, bigintToHexPadZero, bigintToUint8, bufferToUint8, crt, eGcd, gcd, hexPadZero, hexToBigint, hexToUint8, isEven, isOdd, isUnit, lcm, max, min, mod, modAdd, modInv, modMultiply, modPow, negate, phi, random, randomBytes, toBigint, toZn, uint8ToBigint, uint8ToBigintWithNegative, uint8ToBuffer, uint8ToHex, uint8ToHexWithNegative };\n//# sourceMappingURL=bigint-toolkit.es.js.map\n",null,null,null,null,null],"names":["bigintToHex","hexToBigint","hex2bi","bi2hex"],"mappings":"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","x_google_ignoreList":[0]}