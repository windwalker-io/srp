{"version":3,"file":"client.js","sources":["../node_modules/bigint-toolkit/dist/bigint-toolkit.es.js","../../../src/utils.ts","../../../src/services/AbstractSRPHandler.ts","../../../src/services/SRPClient.ts"],"sourcesContent":["/**\n * Return an absolute value of bigint.\n */\nfunction abs(num) {\n    if (num < 0n) {\n        num *= -1n;\n    }\n    return num;\n}\n\n/**\n * Calculates the extended greatest common divisor (eGCD) of two BigInt numbers.\n *\n * This function computes the eGCD of two BigInt numbers 'a' and 'b', and returns an object\n * containing the GCD ('gcd') and coefficients 'x' and 'y' such that 'ax + by = gcd'.\n *\n * ```ts\n * const result = eGcd(16n, 10n);\n * result.g === 2n;\n * result.x === -3n;\n * result.y === 5n;\n * ```\n */\nfunction eGcd(a, b) {\n    if (a === 0n) {\n        return {\n            g: b,\n            x: 0n,\n            y: 1n,\n        };\n    }\n    else {\n        let { g, x, y } = eGcd(b % a, a);\n        return {\n            g,\n            x: y - (b / a) * x,\n            y: x,\n        };\n    }\n}\n\n/**\n * Finds the smallest positive element that is congruent to a in modulo m.\n */\nfunction toZn(a, m) {\n    if (m <= 0n) {\n        throw new Error('m must be > 0');\n    }\n    const aZm = a % m;\n    return (aZm < 0n) ? aZm + m : aZm;\n}\n/**\n * An alias of toZn()\n */\nfunction mod(a, m) {\n    return toZn(a, m);\n}\n\n/**\n * Calculates the modular multiplicative inverse of a BigInt 'a' modulo 'm'.\n *\n * This function computes the value 'x' such that '(a * x) % m === 1' where 'a' and 'm' are BigInt numbers.\n */\nfunction modInv(a, m) {\n    const egcd = eGcd(toZn(a, m), m);\n    if (egcd.g !== 1n) {\n        throw new Error('Modular inverse does not exist');\n    }\n    return toZn(egcd.x, m);\n}\n\n/**\n * Function to implement Chinese Remainder Theorem.\n */\nfunction crt(num, rem) {\n    let sum = 0n;\n    // Product of all numbers\n    const prod = num.reduce((acc, val) => acc * val, 1n);\n    for (let i = 0; i < num.length; i++) {\n        const p = prod / num[i];\n        sum += rem[i] * modInv(p, num[i]) * p;\n    }\n    return sum % prod;\n}\n\n/**\n * Calculates the greatest common divisor (GCD) of two or more BigInt numbers.\n *\n * This function computes the largest positive integer that divides all the input numbers without remainder.\n */\nfunction gcd(a, b) {\n    if (b === 0n) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\n/**\n * Check a bigint is odd.\n */\nfunction isOdd(n) {\n    return (n % 2n) === 1n;\n}\n\n/**\n * Check a bigint is even.\n */\nfunction isEven(n) {\n    return !isOdd(n);\n}\n\n/**\n * Check a bigint is unit.\n */\nfunction isUnit(n) {\n    return abs(n) === 1n;\n}\n\n/**\n * Calculates the least common multiple (LCM) of two or more BigInt numbers.\n */\nfunction lcm(a, b) {\n    return (a / gcd(a, b)) * b;\n}\n\n/**\n * Find max from a set of bigint.\n */\nfunction max(...nums) {\n    return nums.reduce((max, current) => current > max ? current : max);\n}\n\n/**\n * Find min from a set of bigint.\n */\nfunction min(...nums) {\n    return nums.reduce((min, current) => current < min ? current : min);\n}\n\n/**\n * Calculates the modular addition of two BigInt numbers.\n *\n * This function computes the result of `(a + b) % m` where `a`, `b`, and `m` are BigInt numbers.\n */\nfunction modAdd(a, b, mod) {\n    return ((a % mod) + (b % mod)) % mod;\n}\n\n/**\n * Calculates the modular multiplication of two BigInt numbers.\n *\n * This function computes the result of `(a * b) % m` where `a`, `b`, and `m` are BigInt numbers.\n */\nfunction modMultiply(a, b, mod) {\n    return ((a % mod) * (b % mod)) % mod;\n}\n\n/**\n * Calculates the modular exponentiation of a BigInt 'base' to the power of a BigInt 'exponent' modulo 'm'.\n *\n * This function computes the result of `base^exp % m` where 'base', 'exponent', and 'm' are BigInt numbers.\n */\nfunction modPow(base, exp, m) {\n    if (m === 0n) {\n        throw new Error('Cannot modPow with modulus 0');\n    }\n    if (exp === 0n) {\n        return 1n;\n    }\n    base = toZn(base, m);\n    if (exp < 0n) {\n        return modInv(modPow(base, abs(exp), m), m);\n    }\n    let r = 1n;\n    while (exp > 0n) {\n        if (base === 0n) {\n            return 0n;\n        }\n        if (isOdd(exp)) {\n            r = r * base % m;\n        }\n        exp = exp / 2n;\n        base = base * base % m;\n    }\n    return r;\n}\n\n/**\n * Make a bigint negative.\n */\nfunction negate(num) {\n    return -abs(num);\n}\n\n/**\n * Calculates Euler's totient function (phi function) of a BigInt 'n'.\n *\n * Euler's totient function calculates the count of positive integers less than or equal to 'n'\n * that are coprime (have greatest common divisor 1) with 'n'.\n */\nfunction phi(n) {\n    let result = n;\n    for (let i = 2n; i * i <= n; i++) {\n        if (n % i === 0n) {\n            while (n % i === 0n) {\n                n /= i;\n            }\n            result -= result / i;\n        }\n    }\n    if (n > 1n) {\n        result -= result / n;\n    }\n    return result;\n}\n\n/**\n * Generates cryptographically strong pseudorandom data, it will return\n * an Uint8Array object. This function use `crypto.randomBytes()` in node.js\n * and `window.crypto.getRandomValues()` in Web browser.\n *\n * You can convert it to hex by `uint8Array2Hex()` or use some base64\n * library to convert it to string.\n */\nfunction randomBytes(bufferSize) {\n    // This checks if the code is running in a Node.js environment\n    if (typeof process === 'object' && typeof require === 'function') {\n        const { randomBytes: rb } = require('crypto');\n        return new Uint8Array(rb(bufferSize));\n    }\n    else {\n        // For web environments, use the Web Crypto API\n        const buffer = new Uint8Array(bufferSize);\n        window.crypto.getRandomValues(buffer);\n        return buffer;\n    }\n}\n\n/**\n * Generate a random bigint number between 2 numbers.\n */\nfunction random(start, end) {\n    if (start > end) {\n        throw new Error('Start must be less than end');\n    }\n    const diff = end - start + 1n;\n    const diffLength = diff.toString(2).length;\n    let result;\n    do {\n        const byteSize = Math.ceil(diffLength / 8);\n        const buffer = randomBytes(byteSize);\n        let hexString = '0x';\n        buffer.forEach(byte => {\n            hexString += byte.toString(16).padStart(2, '0');\n        });\n        result = BigInt(hexString) & (1n << BigInt(diffLength) - 1n);\n    } while (result > diff);\n    return start + result;\n}\n\nvar math = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    abs: abs,\n    crt: crt,\n    eGcd: eGcd,\n    gcd: gcd,\n    isEven: isEven,\n    isOdd: isOdd,\n    isUnit: isUnit,\n    lcm: lcm,\n    max: max,\n    min: min,\n    mod: mod,\n    modAdd: modAdd,\n    modInv: modInv,\n    modMultiply: modMultiply,\n    modPow: modPow,\n    negate: negate,\n    phi: phi,\n    random: random,\n    toZn: toZn\n});\n\nconst BigMath = math;\n\n/**\n * Pad `0` to start if hex string length is odd.\n */\nfunction hexPadZero(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = '0' + hex;\n    }\n    return hex;\n}\n\n/**\n * Bigint to hex conversion.\n *\n * The second argument `padZero = true` will pad a `0` on start if return length is odd.\n */\nfunction bigintToHex(num, padZero = false) {\n    let hexString = num.toString(16);\n    if (!padZero) {\n        return hexString;\n    }\n    return hexPadZero(hexString);\n}\n\n/**\n * Bigint to hex conversion and pad a `0` on start if return length is odd.\n */\nfunction bigintToHexPadZero(num) {\n    return bigintToHex(num, true);\n}\n\n/**\n * Convert hex string to Uint8Array.\n */\nfunction hexToUint8(hex) {\n    // Calculate the number of bytes needed\n    const numBytes = hex.length / 2;\n    const byteArray = new Uint8Array(numBytes);\n    // Parse each byte in the hex string and add it to the Uint8Array\n    for (let i = 0, j = 0; i < numBytes; i++, j += 2) {\n        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);\n    }\n    return byteArray;\n}\n\n/**\n * Bigint to Uint8Array conversion.\n *\n * By default, this function unable to handle negative bigint, and will throw an Error.\n * If you want to convert a negative bigint to Uint8Array, set second argument as TRUE,\n * that this functions will try making 2's complement on the bigint to make it\n * positive.\n *\n * NOTE: If you convert a negative bigint to Uint8Array, you must use\n *\n * - `uint8ToBigint(num, true)`\n * - `uint8ToBigintWithNegative(num)`\n *\n * to inverse the Uint8Array so you can get negative bigint back.\n */\nfunction bigintToUint8(num, handleNegative = false) {\n    if (num < 0n) {\n        if (handleNegative) {\n            // Do a Bit complement to convert negative bigint to positive bigint\n            const bits = (BigInt(num.toString(2).length) / 8n + 1n) * 8n;\n            const prefix1 = 1n << bits;\n            num += prefix1;\n        }\n        else {\n            throw new Error('BigInt should larger than 0 to convert to Uint8Array');\n        }\n    }\n    return hexToUint8(bigintToHexPadZero(num));\n}\n\n/**\n * Convert an `ArrayBufferLike` interface to `Uint8Array`.\n */\nfunction bufferToUint8(buffer) {\n    return new Uint8Array(buffer);\n}\n\n/**\n * Convert hex to bigint and add `-` sign if origin bigint is negative.\n */\nfunction hexToBigint(hex) {\n    const isNegative = hex.startsWith('-');\n    if (isNegative) {\n        hex = hex.substring(1);\n    }\n    let result = BigInt('0x' + hex);\n    return isNegative ? -result : result;\n}\n\n/**\n * Convert any base of numbers to bigint.\n *\n * ```\n * toBigInt(123456789)\n * toBigInt('75bcd15', 16)\n * toBigInt('111010110111100110100010101', 2)\n * ```\n *\n * This function will auto add negative to hex string if input value less than 0.\n */\nfunction toBigint(num, from = 10) {\n    if (typeof num === 'bigint') {\n        return num;\n    }\n    if (typeof num === 'number') {\n        return BigInt(num);\n    }\n    if (from === 10) {\n        return BigInt(num);\n    }\n    else if (from === 16) {\n        return hexToBigint(num);\n    }\n    else {\n        let decimalValue = 0n;\n        for (let i = 0; i < num.length; i++) {\n            const digit = parseInt(num[i], from);\n            if (isNaN(digit)) {\n                throw new Error('Invalid character for base: ' + from);\n            }\n            decimalValue = decimalValue * BigInt(from) + BigInt(digit);\n        }\n        return decimalValue;\n    }\n}\n\n/**\n * Convert Uint8Array back to bigint.\n *\n * If an Uint8Array has 2's complement (Mostly converted from a negative number),\n * set second argument as TRUE to inverse it.\n */\nfunction uint8ToBigint(bytes, handleNegative = false) {\n    let result = 0n;\n    // Check if the most significant bit of the first byte is set (indicating a negative number)\n    const isNegative = handleNegative && (bytes[0] & 0x80) !== 0;\n    if (isNegative) {\n        // For negative numbers, perform two's complement inversion\n        for (let i = 0; i < bytes.length; i++) {\n            bytes[i] = ~bytes[i] & 0xff;\n        }\n        // Add one to complete the two's complement\n        let carry = 1;\n        for (let i = bytes.length - 1; i >= 0 && carry > 0; i--) {\n            const value = bytes[i] + carry;\n            bytes[i] = value & 0xff;\n            carry = value >> 8;\n        }\n    }\n    // Iterate over the Uint8Array from the beginning and shift left (<<) by 8 bits for each byte\n    for (let i = 0; i < bytes.length; i++) {\n        result = (result << 8n) + BigInt(bytes[i]);\n    }\n    return isNegative ? -result : result;\n}\n\n/**\n * Convert Uint8Array back to bigint and inverse the 2's complement (negative).\n */\nfunction uint8ToBigintWithNegative(bytes) {\n    return uint8ToBigint(bytes, true);\n}\n\n/**\n * Convert Uint8Array to ArrayBufferLike.\n */\nfunction uint8ToBuffer(bytes) {\n    return bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n}\n\n/**\n * Convert Uint8Array to hex string.\n *\n * If an Uint8Array has 2's complement (Mostly converted from a negative number),\n * set second argument as TRUE to inverse it.\n */\nfunction uint8ToHex(bytes, handleNegative = false) {\n    return bigintToHex(uint8ToBigint(bytes, handleNegative));\n}\n\n/**\n * Convert Uint8Array to hex and inverse the 2's complement (negative).\n */\nfunction uint8ToHexWithNegative(bytes) {\n    return bigintToHex(uint8ToBigintWithNegative(bytes));\n}\n\nexport { BigMath, abs, bigintToHex, bigintToHexPadZero, bigintToUint8, bufferToUint8, crt, eGcd, gcd, hexPadZero, hexToBigint, hexToUint8, isEven, isOdd, isUnit, lcm, max, min, mod, modAdd, modInv, modMultiply, modPow, negate, phi, random, randomBytes, toBigint, toZn, uint8ToBigint, uint8ToBigintWithNegative, uint8ToBuffer, uint8ToHex, uint8ToHexWithNegative };\n//# sourceMappingURL=bigint-toolkit.es.js.map\n",null,null,null],"names":[],"mappings":"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","x_google_ignoreList":[0]}