{"version":3,"file":"client.min.js","sources":["../node_modules/bigint-toolkit/dist/bigint-toolkit.es.js","../../../src/utils.ts","../../../src/services/AbstractSRPHandler.ts","../../../src/services/SRPClient.ts"],"sourcesContent":["/**\n * Return an absolute value of bigint.\n */\nfunction abs(num) {\n    if (num < 0n) {\n        num *= -1n;\n    }\n    return num;\n}\n\n/**\n * Calculates the extended greatest common divisor (eGCD) of two BigInt numbers.\n *\n * This function computes the eGCD of two BigInt numbers 'a' and 'b', and returns an object\n * containing the GCD ('gcd') and coefficients 'x' and 'y' such that 'ax + by = gcd'.\n *\n * ```ts\n * const result = eGcd(16n, 10n);\n * result.g === 2n;\n * result.x === -3n;\n * result.y === 5n;\n * ```\n */\nfunction eGcd(a, b) {\n    if (a === 0n) {\n        return {\n            g: b,\n            x: 0n,\n            y: 1n,\n        };\n    }\n    else {\n        let { g, x, y } = eGcd(b % a, a);\n        return {\n            g,\n            x: y - (b / a) * x,\n            y: x,\n        };\n    }\n}\n\n/**\n * Finds the smallest positive element that is congruent to a in modulo m.\n */\nfunction toZn(a, m) {\n    if (m <= 0n) {\n        throw new Error('m must be > 0');\n    }\n    const aZm = a % m;\n    return (aZm < 0n) ? aZm + m : aZm;\n}\n/**\n * An alias of toZn()\n */\nfunction mod(a, m) {\n    return toZn(a, m);\n}\n\n/**\n * Calculates the modular multiplicative inverse of a BigInt 'a' modulo 'm'.\n *\n * This function computes the value 'x' such that '(a * x) % m === 1' where 'a' and 'm' are BigInt numbers.\n */\nfunction modInv(a, m) {\n    const egcd = eGcd(toZn(a, m), m);\n    if (egcd.g !== 1n) {\n        throw new Error('Modular inverse does not exist');\n    }\n    return toZn(egcd.x, m);\n}\n\n/**\n * Function to implement Chinese Remainder Theorem.\n */\nfunction crt(num, rem) {\n    let sum = 0n;\n    // Product of all numbers\n    const prod = num.reduce((acc, val) => acc * val, 1n);\n    for (let i = 0; i < num.length; i++) {\n        const p = prod / num[i];\n        sum += rem[i] * modInv(p, num[i]) * p;\n    }\n    return sum % prod;\n}\n\n/**\n * Calculates the greatest common divisor (GCD) of two or more BigInt numbers.\n *\n * This function computes the largest positive integer that divides all the input numbers without remainder.\n */\nfunction gcd(a, b) {\n    if (b === 0n) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\n/**\n * Check a bigint is odd.\n */\nfunction isOdd(n) {\n    return (n % 2n) === 1n;\n}\n\n/**\n * Check a bigint is even.\n */\nfunction isEven(n) {\n    return !isOdd(n);\n}\n\n/**\n * Check a bigint is unit.\n */\nfunction isUnit(n) {\n    return abs(n) === 1n;\n}\n\n/**\n * Calculates the least common multiple (LCM) of two or more BigInt numbers.\n */\nfunction lcm(a, b) {\n    return (a / gcd(a, b)) * b;\n}\n\n/**\n * Find max from a set of bigint.\n */\nfunction max(...nums) {\n    return nums.reduce((max, current) => current > max ? current : max);\n}\n\n/**\n * Find min from a set of bigint.\n */\nfunction min(...nums) {\n    return nums.reduce((min, current) => current < min ? current : min);\n}\n\n/**\n * Calculates the modular addition of two BigInt numbers.\n *\n * This function computes the result of `(a + b) % m` where `a`, `b`, and `m` are BigInt numbers.\n */\nfunction modAdd(a, b, mod) {\n    return ((a % mod) + (b % mod)) % mod;\n}\n\n/**\n * Calculates the modular multiplication of two BigInt numbers.\n *\n * This function computes the result of `(a * b) % m` where `a`, `b`, and `m` are BigInt numbers.\n */\nfunction modMultiply(a, b, mod) {\n    return ((a % mod) * (b % mod)) % mod;\n}\n\n/**\n * Calculates the modular exponentiation of a BigInt 'base' to the power of a BigInt 'exponent' modulo 'm'.\n *\n * This function computes the result of `base^exp % m` where 'base', 'exponent', and 'm' are BigInt numbers.\n */\nfunction modPow(base, exp, m) {\n    if (m === 0n) {\n        throw new Error('Cannot modPow with modulus 0');\n    }\n    if (exp === 0n) {\n        return 1n;\n    }\n    base = toZn(base, m);\n    if (exp < 0n) {\n        return modInv(modPow(base, abs(exp), m), m);\n    }\n    let r = 1n;\n    while (exp > 0n) {\n        if (base === 0n) {\n            return 0n;\n        }\n        if (isOdd(exp)) {\n            r = r * base % m;\n        }\n        exp = exp / 2n;\n        base = base * base % m;\n    }\n    return r;\n}\n\n/**\n * Make a bigint negative.\n */\nfunction negate(num) {\n    return -abs(num);\n}\n\n/**\n * Calculates Euler's totient function (phi function) of a BigInt 'n'.\n *\n * Euler's totient function calculates the count of positive integers less than or equal to 'n'\n * that are coprime (have greatest common divisor 1) with 'n'.\n */\nfunction phi(n) {\n    let result = n;\n    for (let i = 2n; i * i <= n; i++) {\n        if (n % i === 0n) {\n            while (n % i === 0n) {\n                n /= i;\n            }\n            result -= result / i;\n        }\n    }\n    if (n > 1n) {\n        result -= result / n;\n    }\n    return result;\n}\n\n/**\n * Generates cryptographically strong pseudorandom data, it will return\n * an Uint8Array object. This function use `crypto.randomBytes()` in node.js\n * and `window.crypto.getRandomValues()` in Web browser.\n *\n * You can convert it to hex by `uint8Array2Hex()` or use some base64\n * library to convert it to string.\n */\nfunction randomBytes(bufferSize) {\n    // This checks if the code is running in a Node.js environment\n    if (typeof process === 'object' && typeof require === 'function') {\n        const { randomBytes: rb } = require('crypto');\n        return new Uint8Array(rb(bufferSize));\n    }\n    else {\n        // For web environments, use the Web Crypto API\n        const buffer = new Uint8Array(bufferSize);\n        window.crypto.getRandomValues(buffer);\n        return buffer;\n    }\n}\n\n/**\n * Generate a random bigint number between 2 numbers.\n */\nfunction random(start, end) {\n    if (start > end) {\n        throw new Error('Start must be less than end');\n    }\n    const diff = end - start + 1n;\n    const diffLength = diff.toString(2).length;\n    let result;\n    do {\n        const byteSize = Math.ceil(diffLength / 8);\n        const buffer = randomBytes(byteSize);\n        let hexString = '0x';\n        buffer.forEach(byte => {\n            hexString += byte.toString(16).padStart(2, '0');\n        });\n        result = BigInt(hexString) & (1n << BigInt(diffLength) - 1n);\n    } while (result > diff);\n    return start + result;\n}\n\nvar math = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    abs: abs,\n    crt: crt,\n    eGcd: eGcd,\n    gcd: gcd,\n    isEven: isEven,\n    isOdd: isOdd,\n    isUnit: isUnit,\n    lcm: lcm,\n    max: max,\n    min: min,\n    mod: mod,\n    modAdd: modAdd,\n    modInv: modInv,\n    modMultiply: modMultiply,\n    modPow: modPow,\n    negate: negate,\n    phi: phi,\n    random: random,\n    toZn: toZn\n});\n\nconst BigMath = math;\n\n/**\n * Pad `0` to start if hex string length is odd.\n */\nfunction hexPadZero(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = '0' + hex;\n    }\n    return hex;\n}\n\n/**\n * Bigint to hex conversion.\n *\n * The second argument `padZero = true` will pad a `0` on start if return length is odd.\n */\nfunction bigintToHex(num, padZero = false) {\n    let hexString = num.toString(16);\n    if (!padZero) {\n        return hexString;\n    }\n    return hexPadZero(hexString);\n}\n\n/**\n * Bigint to hex conversion and pad a `0` on start if return length is odd.\n */\nfunction bigintToHexPadZero(num) {\n    return bigintToHex(num, true);\n}\n\n/**\n * Convert hex string to Uint8Array.\n */\nfunction hexToUint8(hex) {\n    // Calculate the number of bytes needed\n    const numBytes = hex.length / 2;\n    const byteArray = new Uint8Array(numBytes);\n    // Parse each byte in the hex string and add it to the Uint8Array\n    for (let i = 0, j = 0; i < numBytes; i++, j += 2) {\n        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);\n    }\n    return byteArray;\n}\n\n/**\n * Bigint to Uint8Array conversion.\n *\n * By default, this function unable to handle negative bigint, and will throw an Error.\n * If you want to convert a negative bigint to Uint8Array, set second argument as TRUE,\n * that this functions will try making 2's complement on the bigint to make it\n * positive.\n *\n * NOTE: If you convert a negative bigint to Uint8Array, you must use\n *\n * - `uint8ToBigint(num, true)`\n * - `uint8ToBigintWithNegative(num)`\n *\n * to inverse the Uint8Array so you can get negative bigint back.\n */\nfunction bigintToUint8(num, handleNegative = false) {\n    if (num < 0n) {\n        if (handleNegative) {\n            // Do a Bit complement to convert negative bigint to positive bigint\n            const bits = (BigInt(num.toString(2).length) / 8n + 1n) * 8n;\n            const prefix1 = 1n << bits;\n            num += prefix1;\n        }\n        else {\n            throw new Error('BigInt should larger than 0 to convert to Uint8Array');\n        }\n    }\n    return hexToUint8(bigintToHexPadZero(num));\n}\n\n/**\n * Convert an `ArrayBufferLike` interface to `Uint8Array`.\n */\nfunction bufferToUint8(buffer) {\n    return new Uint8Array(buffer);\n}\n\n/**\n * Convert hex to bigint and add `-` sign if origin bigint is negative.\n */\nfunction hexToBigint(hex) {\n    const isNegative = hex.startsWith('-');\n    if (isNegative) {\n        hex = hex.substring(1);\n    }\n    let result = BigInt('0x' + hex);\n    return isNegative ? -result : result;\n}\n\n/**\n * Convert any base of numbers to bigint.\n *\n * ```\n * toBigInt(123456789)\n * toBigInt('75bcd15', 16)\n * toBigInt('111010110111100110100010101', 2)\n * ```\n *\n * This function will auto add negative to hex string if input value less than 0.\n */\nfunction toBigint(num, from = 10) {\n    if (typeof num === 'bigint') {\n        return num;\n    }\n    if (typeof num === 'number') {\n        return BigInt(num);\n    }\n    if (from === 10) {\n        return BigInt(num);\n    }\n    else if (from === 16) {\n        return hexToBigint(num);\n    }\n    else {\n        let decimalValue = 0n;\n        for (let i = 0; i < num.length; i++) {\n            const digit = parseInt(num[i], from);\n            if (isNaN(digit)) {\n                throw new Error('Invalid character for base: ' + from);\n            }\n            decimalValue = decimalValue * BigInt(from) + BigInt(digit);\n        }\n        return decimalValue;\n    }\n}\n\n/**\n * Convert Uint8Array back to bigint.\n *\n * If an Uint8Array has 2's complement (Mostly converted from a negative number),\n * set second argument as TRUE to inverse it.\n */\nfunction uint8ToBigint(bytes, handleNegative = false) {\n    let result = 0n;\n    // Check if the most significant bit of the first byte is set (indicating a negative number)\n    const isNegative = handleNegative && (bytes[0] & 0x80) !== 0;\n    if (isNegative) {\n        // For negative numbers, perform two's complement inversion\n        for (let i = 0; i < bytes.length; i++) {\n            bytes[i] = ~bytes[i] & 0xff;\n        }\n        // Add one to complete the two's complement\n        let carry = 1;\n        for (let i = bytes.length - 1; i >= 0 && carry > 0; i--) {\n            const value = bytes[i] + carry;\n            bytes[i] = value & 0xff;\n            carry = value >> 8;\n        }\n    }\n    // Iterate over the Uint8Array from the beginning and shift left (<<) by 8 bits for each byte\n    for (let i = 0; i < bytes.length; i++) {\n        result = (result << 8n) + BigInt(bytes[i]);\n    }\n    return isNegative ? -result : result;\n}\n\n/**\n * Convert Uint8Array back to bigint and inverse the 2's complement (negative).\n */\nfunction uint8ToBigintWithNegative(bytes) {\n    return uint8ToBigint(bytes, true);\n}\n\n/**\n * Convert Uint8Array to ArrayBufferLike.\n */\nfunction uint8ToBuffer(bytes) {\n    return bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n}\n\n/**\n * Convert Uint8Array to hex string.\n *\n * If an Uint8Array has 2's complement (Mostly converted from a negative number),\n * set second argument as TRUE to inverse it.\n */\nfunction uint8ToHex(bytes, handleNegative = false) {\n    return bigintToHex(uint8ToBigint(bytes, handleNegative));\n}\n\n/**\n * Convert Uint8Array to hex and inverse the 2's complement (negative).\n */\nfunction uint8ToHexWithNegative(bytes) {\n    return bigintToHex(uint8ToBigintWithNegative(bytes));\n}\n\nexport { BigMath, abs, bigintToHex, bigintToHexPadZero, bigintToUint8, bufferToUint8, crt, eGcd, gcd, hexPadZero, hexToBigint, hexToUint8, isEven, isOdd, isUnit, lcm, max, min, mod, modAdd, modInv, modMultiply, modPow, negate, phi, random, randomBytes, toBigint, toZn, uint8ToBigint, uint8ToBigintWithNegative, uint8ToBuffer, uint8ToHex, uint8ToHexWithNegative };\n//# sourceMappingURL=bigint-toolkit.es.js.map\n",null,null,null],"names":["abs","num","eGcd","a","b","g","x","y","toZn","m","aZm","mod","modInv","egcd","isOdd","modPow","base","exp","randomBytes","bufferSize","rb","buffer","hexPadZero","hex","bigintToHex","padZero","hexString","bigintToHexPadZero","hexToUint8","numBytes","byteArray","i","j","bigintToUint8","handleNegative","prefix1","hexToBigint","isNegative","result","toBigint","from","decimalValue","digit","uint8ToBigint","bytes","carry","value","uint8ToHex","DEFAULT_PRIME","DEFAULT_GENERATOR","DEFAULT_KEY","timingSafeEquals","isNode","timingSafeEqual","str2buffer","strA","strB","lenA","str","concatArrayBuffers","buffers","totalLength","acc","length","AbstractSRPHandler","prime","generator","key","handler","size","A","B","identity","salt","K","M","args","binaryArgs","arg","hashString","func","hash","hasher","createHash","name","val","primeLength","paddedStr","SRPClient","password","verifier","u","S","M1","serverM2","M2","N","k","B2","secret"],"mappings":"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","x_google_ignoreList":[0]}